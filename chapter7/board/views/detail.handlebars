<h1>{{title}}</h1>
{{#with post}}<!-- post 객체를 쉽게 사용하도록 with절로 감싸기 -->
<!--1. 게시글의 제목 -->
<h2 class="text-xl">{{title}}</h2>

<!--2. 작성자 이름 -->
<div>
  작성자:<b>{{name}}</b>
</div>

<div>
  <!--3. 조회수와 작성일자 -->
  조회수:{{hits}} | 작성일시: {{dateString createdDt}}
  <!--4. 게시글 관련 버튼 영역-->
  <button onclick="modifyPost()">수정</button>
  <button onclick="deletePost()">삭제</button>
</div>

<!--5. 본문 표시 영역 -->
<div>
  <pre>{{content}}</pre>
</div>

<section>
  <!--6. 댓글 개수 표시 -->
  <div>
    <h3>
      {{lengthOfList comments}}개의 댓글이 있습니다.
    </h3>
  </div>

  <!--7. 댓글 작성 폼 -->
  <form method="post" action="/write-comment">
    <input type="hidden" name="id" value="{{_id}}" /> <!-- 게시글의 _id -->
    <div>
      <div>
        <input type="text" name="name" placeholder="이름" />
        <input type="password" name="password" placeholder="비밀번호" />
      </div>
      <div>
        <textarea
          name="comment"
          cols="40"
          rows="3"
          placeholder="댓글을 입력해주세요"
        ></textarea>

        <!--8. 댓글 전송 버튼 -->
        <br /><br />
        <button>댓글쓰기기</button>
      </div>
    </div>

  </form>
</section>

<!--9. 댓글 표시 영역 -->
<section>
  {{#each comments}}
  <div>
    <div>
      작성자:
      <b>{{name}}</b>
    </div>
    <div>
      작성일시: {{dateString createdDt}}
      <button onclick="deleteComment(`{{idx}})">삭제</button>
    </div>
  </div>
  <div>
    <pre>{{comment}}</pre>
  </div>
  {{/each}}
</section>
{{/with}}

<footer>
  <div>
    <!--10. 목록으로 가는 링크 -->
    <a href="/">목록으로</a>
  </div>
</footer>

<script>
  const postOption = {
    method: 'POST',
    headers:{
      'Content-Type': 'application/json',
    }
  }


  async function modifyPost(){
    const password = prompt("패스워드를 입력해주세요");
    // 프롬프트에서 취소를 누른 경우 처리
    if(!password){
      return;
    }

    // check-password API 실행
    const result = await fetch("/check-password",{
      ...postOption,
      body: JSON.stringify({id:"{{post._id}}", password})
    })

    // json 함수를 실행하는 경우도 await 를 해줘야함
    const data = await result.json();

    // 패스워드가 안맞는 경우 수정페이지로 이동
    if(data.isExist){
      document.location = "/modify/{{post._id}}"
    } else {
      alert("패스워드가 올바르지 않습니다. ")
    }
  }

  const deleteOption = {
    method: 'DELETE',
    headers:{
      'Content-Type': 'application/json',
    },
  }

  async function deletePost(){
    // 프롬프트로 값 입력 받기
    const password = prompt("삭제하려면 패스워드를 입력해주세요");
    // 프롬프트에서 취소를 누른 경우 처리
    if (!password){
      return;
    }

    // fetch API를 사용해 delete API호출
    const result = await fetch("/delete", {
      ...deleteOption,
      body: JSON.stringify({id:"{{post._id}}", password})
    });

    // delete API 결과에 따라 다른 메시지 출력
    const data = await result.json();
    if(!data.isSuccess){
      alert('삭제에 실패했습니다. 패스워드를 확인해주세요');
      return;
    }

    document.location = "/";
  }

  // 댓글 삭제
  async function deleteComment(idx) {
    const password= prompt("삭제하려면 패스워드를 입력해주세요");
    // 프롬프트에서 취소를 누른 경우 처리
    if (!password){
      return;
    }

    // delete-comment API 실행
    const result = await fetch("/delete-comment", {
      ...deleteOption,
      body: JSON.stringify({id:"{{post._id}}", idx, password})
    })

    console.log('json 형태가 어떤지 확인', result)
    // 댓글 삭제 실패 시 메시지 띄우고 함수 실행종료
    const data = await result.json();
    if (!data.isSuccess){
      alert("삭제에 실패했습니다. 패스워드를 확인해주세요");
      return;
    }

    // 성공시 메시지를 띄우고 화면 리프레시
    alert("삭제 성공");
    docuemnt.location.reload();
  }
</script>